name: "20: üèéÔ∏è dbt Release Branch Validations"

on:  # yamllint disable-line rule:truthy
  pull_request:
    branches:
      - main
    paths:
      - transform/**/*

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# This cancels a run if another change is pushed to the same branch
concurrency:
  group: transform-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate-branch:
    runs-on: ubuntu-latest
    name: Validate Branch Names and Merge Rules and assure branch has changes from main

    env:
      SOURCE_BRANCH: ${{ github.head_ref }}
      TARGET_BRANCH: ${{ github.base_ref }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_REPOSITORY: ${{ github.repository }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate current branch
      run: automate/git/branch_validator.py

  dbt:
    name: Pull Request dbt Tests
    runs-on: ubuntu-latest

    # Set environment variables in
    # https://github.com//<your org>/<your repo>/settings/variables/actions
    #
    # Alternatively, You can define multiple ENV for different workflows.
    # https://github.com/<org>/<repo>/settings/environments
    # environment: PR_ENV

    # most people should use this one
    container: datacoves/ci-basic-dbt-snowflake:3.4

    defaults:
      run:
        working-directory: /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}/transform

    env:
      DBT_PROFILES_DIR: /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}/automate/dbt
      DATACOVES__DBT_HOME: /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}/transform
      DATACOVES__YAML_DAGS_FOLDER: /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}/schedule

      DATACOVES__MAIN__ACCOUNT:   ${{ vars.DATACOVES__MAIN__ACCOUNT }}

      DATACOVES__MAIN__DATABASE_PROD:  ${{ vars.DATACOVES__MAIN__DATABASE }}
      DATACOVES__MAIN__DATABASE:  ${{ vars.DATACOVES__MAIN__DATABASE }}_QA_TEMP
      DATACOVES__MAIN__DATABASE_QA:  ${{ vars.DATACOVES__MAIN__DATABASE }}_QA

      DATACOVES__MAIN__SCHEMA:    ${{ vars.DATACOVES__MAIN__SCHEMA }}

      DATACOVES__MAIN__ROLE:      ${{ vars.DATACOVES__MAIN__ROLE }}
      DATACOVES__MAIN__WAREHOUSE: ${{ vars.DATACOVES__MAIN__WAREHOUSE }}

      DATACOVES__MAIN__USER:      ${{ vars.DATACOVES__MAIN__USER }}
      DATACOVES__MAIN__PRIVATE_KEY:  ${{ secrets.DATACOVES__MAIN__PRIVATE_KEY }}

      # This is used by datacoves to drop the test database if permissions
      # cannot be applied when using the Datacoves permifrost security model.
      DATACOVES__DROP_DB_ON_FAIL:  ${{ vars.DATACOVES__DROP_DB_ON_FAIL }}

    steps:
      - name: Checkout branch
        uses: actions/checkout@v3.5.0
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set Secure Directory
        run: git config --global --add safe.directory /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}

      - name: List of files changed
        run: "git diff origin/${{ github.event.pull_request.base.ref }} HEAD --name-status"

      - name: Install dbt packages
        run: "dbt deps"

      - name: Clone Prod database
        run: "dbt --no-write-json run-operation clone_database --args '{source_db: ${{ env.DATACOVES__MAIN__DATABASE_PROD }}, target_db: ${{ env.DATACOVES__MAIN__DATABASE }}}'"

      - name: Get prod manifest
        id: prod_manifest
        run: "../automate/dbt/get_artifacts.sh"

      ##### Real dbt run given that we passed governance checks
      - name: Run dbt build slim mode
        if: ${{ steps.prod_manifest.outputs.manifest_found == 'true' && contains(github.event.pull_request.labels.*.name, 'full-refresh') != true }}
        run: "dbt build --fail-fast --defer --state logs --select state:modified+"

      - name: Run dbt build full run
        if: ${{ steps.prod_manifest.outputs.manifest_found == 'false' || contains(github.event.pull_request.labels.*.name, 'full-refresh') }}
        run: "dbt build --fail-fast"

      - name: Grant access to QA_TEMP database
        id: grant-access-to-database
        run: "dbt run-operation grant_prd_usage --args '{db_name: ${{ env.DATACOVES__MAIN__DATABASE }}}'"

      - name: Swap QA with QA_TEMP database and drop old QA db
        run: |
          dbt --no-write-json run-operation swap_database --args '{db1: ${{ env.DATACOVES__MAIN__DATABASE }}, db2: ${{ env.DATACOVES__MAIN__DATABASE_QA }}}'
          dbt --no-write-json run-operation drop_recreate_db --args '{db_name: ${{ env.DATACOVES__MAIN__DATABASE }}, recreate: False}'

      # # We drop the database when there is a failure to grant access to the db because
      # # most likely the schema was not set properly in dbt_project.yml so models built to default schema
      # - name: Drop PR database on Failure to grant security access
      #   if: always() && (env.DATACOVES__DROP_DB_ON_FAIL == 'true') && (steps.grant-access-to-database.outcome == 'failure')
      #   run: "dbt --no-write-json run-operation drop_recreate_db --args '{db_name: ${{env.DATACOVES__MAIN__DATABASE}}, recreate: False}'"  # yamllint disable-line rule:line-length

  dbt-job-status:
    runs-on: ubuntu-latest
    needs: [dbt]
    if: always()
    steps:
      - name: Comment PR with dbt status
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            ## üß™ dbt Workflow Status
            - **Job**: Pull Request dbt Tests ‚Üí **${{ needs.dbt.result }}**

            ${{ needs.dbt.result == 'skipped' && '‚è≠Ô∏è _Skipped because no transform/ files were changed_' || '' }}
            ${{ needs.dbt.result == 'success' && '‚úÖ _All dbt validations passed_' || '' }}
            ${{ needs.dbt.result == 'failure' && '‚ùå _dbt validations failed_' || '' }}
          comment_tag: dbt-workflow-status
